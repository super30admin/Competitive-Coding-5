//BFS
//TC:O(n)
//sc:O(h)
//passed on leetcode: yes
class Solution {
    public List<Integer> largestValues(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        if (root == null) return result;
        Queue <TreeNode> q = new LinkedList<>();
        q.add(root);
        while (!q.isEmpty()){
            int size = q.size();
            int max = Integer.MIN_VALUE;
            for (int i=0; i<size; i++){
                TreeNode curr = q.poll();
                    if (curr.val > max) {
                        max = curr.val;
                    }
                    if (curr.left!= null) q.add(curr.left);
                    if (curr.right!= null) q.add(curr.right);
             }
            result.add(max);
        }
        return result;
    }
} 
//DFS
//tc: O(n)
//sc:O(n)
//passed all testcases on leetcode:yes
class Solution {
     List<Integer> result;
    public List<Integer> largestValues(TreeNode root) {
        result = new ArrayList<>();
        helper(root,0);
        return result;   
     }
    
    private void helper(TreeNode root, int level) {
        //base
        if (root == null) return;
        
        //logic
        if (result.size() == level) {
            result.add(root.val);
            }
        else {
            if (root.val >= result.get(level)){
                result.set(level,root.val);
                }
        }
        helper(root.left, level+1);
        helper(root.right, level+1);
    }
} 
