// Time Complexity : O(N)
// Space Complexity : O(M) M is the longest breath of a tree.
// Did this code successfully run on Leetcode :
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> largestValues(TreeNode root) {
        List<Integer> output = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        
        //Base case
        if(root == null){
            return output;
        }
        
       int max = root.val;
        queue.add(root);
        
        while(!queue.isEmpty()){
            output.add(max);
            int qsize = queue.size();
            max = Integer.MIN_VALUE;
            for(int i = 0; i < qsize; i++){
                TreeNode head = queue.poll();
                if(head.left != null){
                     queue.add(head.left);   
                     if(head.left.val > max) max = head.left.val;
                }
                
                if(head.right != null){
                     queue.add(head.right);
                     if(head.right.val > max) max = head.right.val;
                } 
            }
        }
        
        return output;
        
        
    }
}
