// Time Complexity : O(n)
// Space Complexity : O(n)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


class Solution {
    public List<Integer> largestValues(TreeNode root) {
        /*dfs
         // recursively go to depth of node and increase level at each node and if the list size
         // is less than or equal to level then add it to list else update the value at that level 
         // in the list with max value of node val or value at that level in list
        
        List<Integer> result = new ArrayList<>();
        dfs(root,0,result);
        return result;
    }
    public void dfs(TreeNode root, int level, List<Integer> result){
        if(root == null)
            return;
        if(result.size() <= level)
            result.add(root.val);
        else
            result.set(level,Math.max(result.get(level),root.val));
        dfs(root.left,level+1,result);
        dfs(root.right,level+1,result);
    }  */
    /* bfs */
        List<Integer> result = new ArrayList<>(); // list to store list
        if(root == null) /* edge case */
            return result;
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root); // add root to queue
        while(!q.isEmpty()){
          int size = q.size(); // items to iterate for current level
           int max = Integer.MIN_VALUE;
          for( int i= 0; i< size ;i++){
              TreeNode temp = q.poll(); // iterate over the items
              max = Math.max(max, temp.val); // find the max value
              if(temp.left != null) q.offer(temp.left); // add left and right of node
              if(temp.right != null) q.offer(temp.right);
          }
          result.add(max); // add max to list
        }
        return result; // return list
    }
}


  