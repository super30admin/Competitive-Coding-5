// Time Complexity : O(n) n- number of nodes
// Space Complexity : O(l) l- number of nodes in a level
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> largestValues(TreeNode root) {
        
        List<Integer> result = new ArrayList<>();
        
        if(root == null)
            return result;
        
        Queue<TreeNode> bfsQ = new LinkedList<>();
        bfsQ.add(root);
        
        while(!bfsQ.isEmpty())
        {
            int size = bfsQ.size();
            int max = Integer.MIN_VALUE;
            for(int i=0; i<size; i++)
            {
                TreeNode temp = bfsQ.poll();
                
                if(max < temp.val)
                    max = temp.val;
                
                if(temp.left != null)
                    bfsQ.add(temp.left);
                
                if(temp.right != null)
                    bfsQ.add(temp.right);
                
               
            }
            result.add(max);
        }
        return result;
    }
}
